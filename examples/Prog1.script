def Prog1():
  # Global parameters:
  global speed_ms    = 0.300
  global speed_rads  = 0.750
  global accel_mss   = 3.000
  global accel_radss = 1.200
  global blend_radius_m = 0.001
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to drive an extruder:
  def Extruder(value):
    # use the value as an output:
    if value < 0:
      # stop extruder
    else:
      # start extruder
    end
  end
  
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  
  # Main program:
  # Program generated by RoboDK v3.8.4 for UR10 on 22/07/2019 14:49:56
  # Using nominal kinematics.
  # set_reference(p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  movej([0.000000, -1.570796, -1.570796, 0.000000, 1.570796, -0.000000],accel_radss,speed_rads,0,0)
  movej([0.394431, -1.537035, -1.603947, -0.000611, 1.176365, -0.000000],accel_radss,speed_rads,0,blend_radius_m)
  movel(p[0.663800, 0.060394, 1.007847, -1.209200, 1.209200, -1.209200],accel_mss,speed_ms,0,blend_radius_m)
  movej([0.000000, -1.570796, -1.570796, 0.000000, 1.570796, -0.000000],accel_radss,speed_rads,0,blend_radius_m)
  movec(p[0.768367, -0.048527, 0.856400, -1.209200, 1.209200, -1.209200],p[0.663800, 0.060394, 0.856400, -1.209200, 1.209200, -1.209200],accel_mss,speed_ms,blend_radius_m)
  accel_radss = 13.963
  speed_rads  = 8.727
  accel_mss   = 3.000
  speed_ms    = 0.500
  popup("Display message","Message",False,False,blocking=True)
  sleep(0.500)
  set_standard_digital_out(5, True)
  while (get_standard_digital_in(5) != True):
    sync()
  end
  set_tcp(p[0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  # End of main program
end

Prog1()
