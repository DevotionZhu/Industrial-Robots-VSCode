def MainProg():
  # Global parameters:
  global speed_ms    = 0.250
  global speed_rads  = 0.750
  global accel_mss   = 1.200
  global accel_radss = 1.200
  global blend_radius_m = 0.001
  
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to synchronize 2
  def Synchronize():
    # Use the following digital output to signal the state of the robot:
    DO_SYNC = 1
    
    # Use the following digital input to get the state of another robot:
    DI_SYNC = 1
    
    if (get_standard_digital_out(DO_SYNC) == get_standard_digital_in(DI_SYNC)):
      set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DI_SYNC)))
      sleep(0.1)
      thread Thread_wait_1():
        while (True):
          sleep(0.01)
        end
      end
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        global thread_handler_1=run Thread_wait_1()
        while (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
          sync()
        end
        kill thread_handler_1
      end
    else:
      if (get_standard_digital_out(DO_SYNC) != get_standard_digital_in(DI_SYNC)):
        set_standard_digital_out(DO_SYNC, not (get_standard_digital_out(DO_SYNC)))
      end
    end
  end

  #
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  # Subprogram ApproachMove
  def ApproachMove():
    # Using Ref. Frame 2: p[-0.800000, 0.500000, 0.100000, 0.000000, 0.000000, 3.141593]
    # set_reference(p[-0.800000, 0.500000, 0.100000, 0.000000, 0.000000, 3.141593])
    # Using TCP Paint gun: p[0.050000, 0.000000, 0.450000, 0.000000, 0.523599, 0.000000]
    set_tcp(p[0.050000, 0.000000, 0.450000, 0.000000, 0.523599, 0.000000])
    movej([-2.652653, -1.365240, -1.512183, -1.127522, 1.275170, 1.920416],1.20000,0.25000,0.0000)
    movej([-3.642352, -1.680990, -1.433833, -1.128762, 1.813209, 1.128192],1.20000,0.25000,0.0010)
  end
  
  # Subprogram PaintTop
  def PaintTop():
    movej([-3.831622, -2.007013, -1.342957, -1.224118, 2.230783, 1.418370],1.20000,0.25000,0.0010)
    speed_ms    = 0.0500
    movel(p[-1.155200, 0.474185, 0.136150, 2.470767, -0.285908, 0.097443],accel_mss,speed_ms,0,0.001)
    movel(p[-1.164047, 0.375424, 0.130832, -2.799617, 0.439702, 0.068843],accel_mss,speed_ms,0,0.001)
    movel(p[-0.829883, 0.359668, 0.126469, -2.818294, 0.589270, 0.079123],accel_mss,speed_ms,0,0.001)
    movel(p[-0.829250, 0.237038, 0.127370, 2.859499, -0.306492, 0.041154],accel_mss,speed_ms,0,0.001)
    movel(p[-1.179268, 0.240160, 0.126516, 2.867256, -0.214189, 0.028760],accel_mss,speed_ms,0,0.001)
    movel(p[-1.157907, 0.123396, 0.134284, -2.479771, 0.169544, 0.057784],accel_mss,speed_ms,0,0.001)
    movel(p[-0.825987, 0.133387, 0.139825, -2.683326, 0.266409, 0.060501],accel_mss,speed_ms,0,0.001)
  end
  
  # Subprogram Retract
  def Retract():
    movel(p[-0.825987, 0.133387, 0.269825, -2.683331, 0.266413, 0.060501],accel_mss,speed_ms,0,0.001)
    movej([-2.652653, -1.365240, -1.512183, -1.127522, 1.275170, 1.920416],1.20000,0.05000,0.0010)
  end
  
  
  # Main program:
  # Program generated by RoboDK v3.8.4 for UR10 on 17/07/2019 15:17:38
  # Using nominal kinematics.
  ApproachMove()
  SprayOn(1)
  PaintTop()
  SprayOn(0)
  Retract()
  # End of main program
end

MainProg()
